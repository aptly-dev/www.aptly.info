{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/db/cleanup": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Database"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/files": {
            "get": {
                "description": "**Get list of uploaded files**",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "List Files",
                "responses": {
                    "200": {
                        "description": "List of files",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/files/{dir}": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/files/{dir}/{name}": {
            "delete": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/gpg": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GPG"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/graph": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Graph"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/healthy": {
            "get": {
                "description": "**Get aptly health state**\n\nReturn aptly health state:\n- `Aptly is healthy` (HTTP 200)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Health State",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.aptlyStatus"
                        }
                    }
                }
            }
        },
        "/api/mirrors": {
            "get": {
                "description": "**Show list of currently available mirrors**\nEach mirror is returned as in “show” API.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mirrors"
                ],
                "summary": "Get mirrors",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/deb.RemoteRepo"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "**Create a mirror**",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mirrors"
                ],
                "summary": "Create mirror",
                "parameters": [
                    {
                        "description": "Parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.mirrorCreateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deb.RemoteRepo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/mirrors/{name}": {
            "get": {
                "description": "**Get mirror information by name**",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mirrors"
                ],
                "summary": "Show Mirror",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mirror name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deb.RemoteRepo"
                        }
                    },
                    "404": {
                        "description": "Mirror not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "**Update Mirror and download packages**",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mirrors"
                ],
                "summary": "Update Mirror",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mirror name to update",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.mirrorUpdateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mirror was updated successfully",
                        "schema": {
                            "$ref": "#/definitions/task.ProcessReturnValue"
                        }
                    },
                    "202": {
                        "description": "Mirror is being updated",
                        "schema": {
                            "$ref": "#/definitions/task.Task"
                        }
                    },
                    "400": {
                        "description": "Unable to determine list of architectures",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Mirror not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "**Delete a mirror**",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mirrors"
                ],
                "summary": "Delete Mirror",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mirror name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "force: 1 to enable",
                        "name": "force",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/task.ProcessReturnValue"
                        }
                    },
                    "403": {
                        "description": "Unable to delete mirror with snapshots",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Mirror not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Unable to delete",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/mirrors/{name}/packages": {
            "get": {
                "description": "**Get a list of packages from a mirror**",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mirrors"
                ],
                "summary": "List Mirror Packages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "mirror name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "search query",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "format: `details` for more detailed information",
                        "name": "format",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Packages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/deb.Package"
                            }
                        }
                    },
                    "400": {
                        "description": "Unable to determine list of architectures",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Mirror not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/mirrors/{name}/snapshots": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/packages": {
            "get": {
                "description": "Get list of packages.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packages"
                ],
                "summary": "Get packages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "search query",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "format: `details` for more detailed information",
                        "name": "format",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of packages",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/packages/{key}": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packages"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/publish": {
            "get": {
                "description": "Get list of available publish points. Each publish point is returned as in “show” API.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Publish"
                ],
                "summary": "Get publish points",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/deb.PublishedRepo"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/publish/{prefix}": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Publish"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/publish/{prefix}/{distribution}": {
            "put": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Publish"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Publish"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/ready": {
            "get": {
                "description": "**Get aptly ready state**\n\nReturn aptly ready state:\n- `Aptly is ready` (HTTP 200)\n- `Aptly is unavailable` (HTTP 503)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Ready State",
                "responses": {
                    "200": {
                        "description": "Aptly is ready",
                        "schema": {
                            "$ref": "#/definitions/api.aptlyStatus"
                        }
                    },
                    "503": {
                        "description": "Aptly is unavailable",
                        "schema": {
                            "$ref": "#/definitions/api.aptlyStatus"
                        }
                    }
                }
            }
        },
        "/api/repos": {
            "get": {
                "description": "**Get list of available repos**\nEach repo is returned as in “show” API.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "Get repos",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/deb.LocalRepo"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a local repository.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of repository to be created.",
                        "name": "Name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Text describing local repository, for the user",
                        "name": "Comment",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Default distribution when publishing from this local repo",
                        "name": "DefaultDistribution",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Default component when publishing from this local repo",
                        "name": "DefaultComponent",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/deb.LocalRepo"
                        }
                    },
                    "400": {
                        "description": "Repository already exists",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/repos/{name}": {
            "get": {
                "description": "Returns basic information about local repository.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "Get repository info by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/deb.LocalRepo"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/repos/{name}/copy/{src}/{file}": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/repos/{name}/file/{dir}/{file}": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/repos/{name}/include/{dir}": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/repos/{name}/include/{dir}/{file}": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/repos/{name}/packages": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/repos/{name}/snapshots": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/repos/{name}/{dir}": {
            "post": {
                "description": "Import packages from files (uploaded using File Upload API) to the local repository. If directory specified, aptly would discover package files automatically.\nAdding same package to local repository is not an error.\nBy default aptly would try to remove every successfully processed file and directory `dir` (if it becomes empty after import).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "Add packages from uploaded file/directory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Directory to add",
                        "name": "dir",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "when value is set to 1, don’t remove any files",
                        "name": "noRemove",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "when value is set to 1, remove packages conflicting with package being added (in local repository)",
                        "name": "forceReplace",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "wrong file",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Repository not found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Error adding files",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/s3": {
            "get": {
                "description": "**Get list of S3 buckets**",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "S3"
                ],
                "summary": "S3 buckets",
                "responses": {
                    "200": {
                        "description": "List of S3 buckets",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/snapshots": {
            "get": {
                "description": "Get list of available snapshots. Each snapshot is returned as in “show” API.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "Get snapshots",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/deb.Snapshot"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/snapshots/{name}": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/snapshots/{name}/diff/{withSnapshot}": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/snapshots/{name}/merge": {
            "post": {
                "description": "**Merge several source snapshots into a new snapshot**\n\nMerge happens from left to right. By default, packages with the same name-architecture pair are replaced during merge (package from latest snapshot on the list wins).\n\nIf only one snapshot is specified, merge copies source into destination.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "Snapshot Merge",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the snapshot to be created",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "merge only the latest version of each package",
                        "name": "latest",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "all versions of packages are preserved during merge",
                        "name": "no-remove",
                        "in": "query"
                    },
                    {
                        "description": "Parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.snapshotsMergeParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/snapshots/{name}/packages": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/snapshots/{name}/pull": {
            "post": {
                "description": "**Pulls new packages and dependencies from a source snapshot into a new snapshot**\n\nMay also upgrade package versions if name snapshot already contains packages being pulled. New snapshot `Destination` is created as result of this process.\nIf architectures are limited (with config architectures or parameter `Architectures`, only mentioned architectures are processed, otherwise aptly will process all architectures in the snapshot.\nIf following dependencies by source is enabled (using dependencyFollowSource config), pulling binary packages would also pull corresponding source packages as well.\nBy default aptly would remove packages matching name and architecture while importing: e.g. when importing software_1.3_amd64, package software_1.2.9_amd64 would be removed.\n\nWith flag `no-remove` both package versions would stay in the snapshot.\n\nAptly pulls first package matching each of package queries, but with flag -all-matches all matching packages would be pulled.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snapshots"
                ],
                "summary": "Snapshot Pull",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the snapshot to be created",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "pull all the packages that satisfy the dependency version requirements (default is to pull first matching package): 1 to enable",
                        "name": "all-matches",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "don’t create destination snapshot, just show what would be pulled: 1 to enable",
                        "name": "dry-run",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "don’t process dependencies, just pull listed packages: 1 to enable",
                        "name": "no-deps",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "don’t remove other package versions when pulling package: 1 to enable",
                        "name": "no-remove",
                        "in": "query"
                    },
                    {
                        "description": "Parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.snapshotsPullParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/storage": {
            "get": {
                "description": "**Get disk free information of aptly storage**",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Get Storage Utilization",
                "responses": {
                    "200": {
                        "description": "Storage information",
                        "schema": {
                            "$ref": "#/definitions/api.diskFree"
                        }
                    },
                    "400": {
                        "description": "Internal Error",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/tasks": {
            "get": {
                "description": "Get list of available tasks. Each task is returned as in “show” API.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/task.Task"
                            }
                        }
                    }
                }
            }
        },
        "/api/tasks-clear": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/tasks-dummy": {
            "post": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/tasks-wait": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/tasks/{id}": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/tasks/{id}/detail": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/tasks/{id}/output": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/tasks/{id}/return_value": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/tasks/{id}/wait": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "TODO",
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        },
        "/api/version": {
            "get": {
                "description": "**Get aptly version**\nReturns the aptly version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Aptly version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.aptlyVersion"
                        }
                    }
                }
            }
        },
        "/api/{storage}/{pkgPath}": {
            "get": {
                "description": "**ToDo**\nTo Do",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Repos"
                ],
                "summary": "TODO",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage",
                        "name": "storage",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Package Path",
                        "name": "pkgPath",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "msg",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "api.aptlyStatus": {
            "type": "object",
            "properties": {
                "Status": {
                    "description": "Aptly Status",
                    "type": "string",
                    "example": "'Aptly is ready', 'Aptly is unavailable', 'Aptly is healthy'"
                }
            }
        },
        "api.aptlyVersion": {
            "type": "object",
            "properties": {
                "Version": {
                    "description": "Aptly Version",
                    "type": "string"
                }
            }
        },
        "api.diskFree": {
            "type": "object",
            "properties": {
                "free": {
                    "description": "Available Storage [MiB]",
                    "type": "integer"
                },
                "percentFull": {
                    "description": "Percentage Full",
                    "type": "number"
                },
                "total": {
                    "description": "Storage size [MiB]",
                    "type": "integer"
                }
            }
        },
        "api.mirrorCreateParams": {
            "type": "object",
            "required": [
                "ArchiveURL",
                "Name"
            ],
            "properties": {
                "Architectures": {
                    "description": "Limit mirror to those architectures, if not specified aptly would fetch all architectures",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "amd64"
                    ]
                },
                "ArchiveURL": {
                    "description": "Url of the archive to mirror",
                    "type": "string",
                    "example": "http://deb.debian.org/debian"
                },
                "Components": {
                    "description": "Components to mirror, if not specified aptly would fetch all components",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "main"
                    ]
                },
                "Distribution": {
                    "description": "Distribution name to mirror",
                    "type": "string",
                    "example": "'buster', for flat repositories use './'"
                },
                "DownloadInstaller": {
                    "description": "Set \"true\" to mirror installer files",
                    "type": "boolean"
                },
                "DownloadSources": {
                    "description": "Set \"true\" to mirror source packages",
                    "type": "boolean"
                },
                "DownloadUdebs": {
                    "description": "Set \"true\" to mirror udeb files",
                    "type": "boolean"
                },
                "Filter": {
                    "description": "Package query that is applied to mirror packages",
                    "type": "string",
                    "example": "xserver-xorg"
                },
                "FilterWithDeps": {
                    "description": "Set \"true\" to include dependencies of matching packages when filtering",
                    "type": "boolean"
                },
                "IgnoreSignatures": {
                    "description": "Set \"true\" to skip the verification of Release file signatures",
                    "type": "boolean"
                },
                "Keyrings": {
                    "description": "Gpg keyring(s) for verifying Release file",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "trustedkeys.gpg"
                    ]
                },
                "Name": {
                    "description": "Name of mirror to be created",
                    "type": "string",
                    "example": "mirror2"
                },
                "SkipArchitectureCheck": {
                    "description": "Set \"true\" to skip the verification of architectures",
                    "type": "boolean"
                },
                "SkipComponentCheck": {
                    "description": "Set \"true\" to skip if the given components are in the Release file",
                    "type": "boolean"
                }
            }
        },
        "api.mirrorUpdateParams": {
            "type": "object",
            "properties": {
                "Architectures": {
                    "description": "Limit mirror to those architectures, if not specified aptly would fetch all architectures",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "amd64"
                    ]
                },
                "ArchiveURL": {
                    "description": "Url of the archive to mirror",
                    "type": "string",
                    "example": "http://deb.debian.org/debian"
                },
                "Components": {
                    "description": "Components to mirror, if not specified aptly would fetch all components",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "main"
                    ]
                },
                "DownloadSources": {
                    "description": "Set \"true\" to mirror source packages",
                    "type": "boolean"
                },
                "DownloadUdebs": {
                    "description": "Set \"true\" to mirror udeb files",
                    "type": "boolean"
                },
                "Filter": {
                    "description": "Package query that is applied to mirror packages",
                    "type": "string",
                    "example": "xserver-xorg"
                },
                "FilterWithDeps": {
                    "description": "Set \"true\" to include dependencies of matching packages when filtering",
                    "type": "boolean"
                },
                "ForceUpdate": {
                    "description": "Set \"true\" to force a mirror update even if another process is already updating the mirror (use with caution!)",
                    "type": "boolean"
                },
                "IgnoreChecksums": {
                    "description": "Set \"true\" to ignore checksum errors",
                    "type": "boolean"
                },
                "IgnoreSignatures": {
                    "description": "Set \"true\" to skip the verification of Release file signatures",
                    "type": "boolean"
                },
                "Keyrings": {
                    "description": "Gpg keyring(s) for verifing Release file",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "trustedkeys.gpg"
                    ]
                },
                "Name": {
                    "description": "Change mirror name to `Name`",
                    "type": "string",
                    "example": "mirror1"
                },
                "SkipArchitectureCheck": {
                    "description": "Set \"true\" to skip checking if the given architectures are in the Release file",
                    "type": "boolean"
                },
                "SkipComponentCheck": {
                    "description": "Set \"true\" to skip checking if the given components are in the Release file",
                    "type": "boolean"
                },
                "SkipExistingPackages": {
                    "description": "Set \"true\" to skip downloading already downloaded packages",
                    "type": "boolean"
                }
            }
        },
        "api.snapshotsMergeParams": {
            "type": "object",
            "required": [
                "Sources"
            ],
            "properties": {
                "Sources": {
                    "description": "List of snapshot names to be merged",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "snapshot1"
                    ]
                }
            }
        },
        "api.snapshotsPullParams": {
            "type": "object",
            "required": [
                "Destination",
                "Queries",
                "Source"
            ],
            "properties": {
                "Architectures": {
                    "description": "List of architectures (optional)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "amd64",
                        " armhf"
                    ]
                },
                "Destination": {
                    "description": "Name of the snapshot to be created",
                    "type": "string",
                    "example": "idestination-snapshot"
                },
                "Queries": {
                    "description": "List of package queries (i.e. name of package to be pulled from `Source`)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "xserver-xorg"
                    ]
                },
                "Source": {
                    "description": "Source name to be searched for packages and dependencies",
                    "type": "string",
                    "example": "source-snapshot"
                }
            }
        },
        "deb.LocalRepo": {
            "type": "object",
            "properties": {
                "comment": {
                    "description": "Comment",
                    "type": "string"
                },
                "defaultComponent": {
                    "description": "DefaultComponent",
                    "type": "string"
                },
                "defaultDistribution": {
                    "description": "DefaultDistribution",
                    "type": "string"
                },
                "name": {
                    "description": "User-assigned name",
                    "type": "string"
                }
            }
        },
        "deb.Package": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "filesHash": {
                    "description": "Hash of files section",
                    "type": "integer"
                },
                "isInstaller": {
                    "description": "Is this package a dummy installer package",
                    "type": "boolean"
                },
                "isSource": {
                    "description": "Is this source package",
                    "type": "boolean"
                },
                "isUdeb": {
                    "description": "Is this udeb package",
                    "type": "boolean"
                },
                "name": {
                    "description": "Basic package properties",
                    "type": "string"
                },
                "provides": {
                    "description": "List of virtual packages this package provides",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "source": {
                    "description": "For binary package, name of source package",
                    "type": "string"
                },
                "sourceArchitecture": {
                    "description": "If this source package, this field holds \"real\" architecture value,\nwhile Architecture would be equal to \"source\"",
                    "type": "string"
                },
                "v06Plus": {
                    "description": "Is this \u003e= 0.6 package?",
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "deb.PublishedRepo": {
            "type": "object",
            "properties": {
                "acquireByHash": {
                    "description": "Provide index files per hash also",
                    "type": "boolean"
                },
                "architectures": {
                    "description": "Architectures is a list of all architectures published",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "butAutomaticUpgrades": {
                    "type": "string"
                },
                "codename": {
                    "type": "string"
                },
                "component": {
                    "description": "Legacy fields for compatibility with old published repositories (\u003c 0.6)",
                    "type": "string"
                },
                "distribution": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "notAutomatic": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "skipBz2": {
                    "description": "Skip bz2 compression for index files",
                    "type": "boolean"
                },
                "skipContents": {
                    "description": "Skip contents generation",
                    "type": "boolean"
                },
                "sourceKind": {
                    "description": "SourceKind is \"local\"/\"repo\"",
                    "type": "string"
                },
                "sourceUUID": {
                    "description": "SourceUUID is UUID of either snapshot or local repo",
                    "type": "string"
                },
                "sources": {
                    "description": "Map of sources by each component: component name -\u003e source UUID",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "storage": {
                    "description": "Storage \u0026 Prefix \u0026 distribution should be unique across all published repositories",
                    "type": "string"
                },
                "suite": {
                    "type": "string"
                },
                "uuid": {
                    "description": "Internal unique ID",
                    "type": "string"
                }
            }
        },
        "deb.RemoteRepo": {
            "type": "object",
            "properties": {
                "architectures": {
                    "description": "List of architectures to fetch, if empty, then fetch all architectures",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "archiveRoot": {
                    "description": "Root of Debian archive, URL",
                    "type": "string"
                },
                "components": {
                    "description": "List of components to fetch, if empty, then fetch all components",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "distribution": {
                    "description": "Distribution name, e.g. squeeze",
                    "type": "string"
                },
                "downloadInstaller": {
                    "description": "Should we download installer files?",
                    "type": "boolean"
                },
                "downloadSources": {
                    "description": "Should we download sources?",
                    "type": "boolean"
                },
                "downloadUdebs": {
                    "description": "Should we download .udebs?",
                    "type": "boolean"
                },
                "filter": {
                    "description": "Filter for packages",
                    "type": "string"
                },
                "filterWithDeps": {
                    "description": "FilterWithDeps to include dependencies from filter query",
                    "type": "boolean"
                },
                "lastDownloadDate": {
                    "description": "Last update date",
                    "type": "string"
                },
                "meta": {
                    "description": "Meta-information about repository",
                    "allOf": [
                        {
                            "$ref": "#/definitions/deb.Stanza"
                        }
                    ]
                },
                "name": {
                    "description": "User-assigned name",
                    "type": "string"
                },
                "packages": {
                    "description": "Packages for json output",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "skipArchitectureCheck": {
                    "description": "SkipArchitectureCheck skips architecture list verification",
                    "type": "boolean"
                },
                "skipComponentCheck": {
                    "description": "SkipComponentCheck skips component list verification",
                    "type": "boolean"
                },
                "status": {
                    "description": "Status marks state of repository (being updated, no action)",
                    "type": "integer"
                },
                "uuid": {
                    "description": "Permanent internal ID",
                    "type": "string"
                },
                "workerPID": {
                    "description": "WorkerPID is PID of the process modifying the mirror (if any)",
                    "type": "integer"
                }
            }
        },
        "deb.Snapshot": {
            "type": "object",
            "properties": {
                "butAutomaticUpgrades": {
                    "type": "string"
                },
                "createdAt": {
                    "description": "Date of creation",
                    "type": "string"
                },
                "description": {
                    "description": "Description of how snapshot was created",
                    "type": "string"
                },
                "localRepos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deb.LocalRepo"
                    }
                },
                "name": {
                    "description": "Human-readable name",
                    "type": "string"
                },
                "notAutomatic": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "packages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remoteRepos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deb.RemoteRepo"
                    }
                },
                "snapshots": {
                    "description": "Sources",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/deb.Snapshot"
                    }
                },
                "sourceKind": {
                    "description": "Source: kind + ID",
                    "type": "string"
                }
            }
        },
        "deb.Stanza": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "task.ProcessReturnValue": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "value": {}
            }
        },
        "task.State": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "IDLE",
                "RUNNING",
                "SUCCEEDED",
                "FAILED"
            ]
        },
        "task.Task": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/task.State"
                }
            }
        }
    }
}